unit Classe.Produto;

interface

uses
  System.SysUtils, Vcl.Dialogs;

type

  TProduto = class
    private
      FProdCodigo: Integer;
      FProdNome: string;
      function GetProdCodigo: Integer;
      procedure SetProdCodigo(intProdCodigo: Integer); overload;
      procedure SetProdCodigo(strProdCodigo: string); overload;
      function GetProdNome: string;
      procedure SetProdNome(strProdNome: string);
    public
      ProdValor: Double;
      ProdMoeda: Integer;
      property ProdCodigo: integer read GetProdCodigo write SetProdCodigo;
      property ProdNome: string read GetProdNome write SetProdNome;
      procedure GetProduto(intProdCodigo: integer);
  end;

implementation

uses
  uPrincipal;

{ TProduto }

procedure TProduto.GetProduto(intProdCodigo: integer);
var
  strDmlSql: string;
begin
  strDmlSql := 'SELECT PROD_CODIGO, PROD_NOME, PROD_VALOR FROM PRODUTO ';
  strDmlSql := strDmlSql + 'WHERE PROD_CODIGO = ' + IntToStr(intProdCodigo);

  frmPrincipal.ZQuery1.SQL.Clear;
  frmPrincipal.ZQuery1.SQL.Add(strDmlSql);

  try
    frmPrincipal.ZQuery1.Open;
  except
    on e: Exception do
    begin
      ShowMessage('Produto não carregado. Motivo: ' + e.Message);
      Abort;
    end;
  end;

  if frmPrincipal.ZQuery1.RecordCount = 0 then
  begin
    ShowMessage('Produto não encontrado.');
    Abort;
  end;

  ProdCodigo := frmPrincipal.ZQuery1.FieldByName('PROD_CODIGO').AsInteger;
  ProdNome := frmPrincipal.ZQuery1.FieldByName('PROD_NOME').AsString;
  ProdValor := frmPrincipal.ZQuery1.FieldByName('PROD_VALOR').AsFloat;
end;

function TProduto.GetProdCodigo: Integer;
begin
  Result := FProdCodigo;
end;

procedure TProduto.SetProdCodigo(intProdCodigo: Integer);
begin
  if intProdCodigo <= 0 then
  begin
    ShowMessage('Código do Produto deve ser superior à zero.');
    Abort;
  end;

  FProdCodigo := intProdCodigo;
end;

procedure TProduto.SetProdCodigo(strProdCodigo: string);
var
  strValor: string;
  intValor: Integer;
begin
  strValor := Trim(strProdCodigo);

  if Trim(strValor) = '') then
  begin
    ShowMessage('Código do Produto não informado.');
    Abort;
  end;

  try
    intValor := StrToInt(strValor);
  except
    ShowMessage('Código no Produto inválido.');
    Abort;
  end;

  FProdCodigo := intValor;
end;

function TProduto.GetProdNome: string;
begin
  Result := FProdNome;
end;

procedure TProduto.SetProdNome(strProdNome: string);
var
  strValor: string;
begin
  strValor := Trim(strProdNome);

  if strValor = '' then
  begin
    ShowMessage('Nome do Produto não informado.');
    Abort;
  end;

  FProdNome := strProdNome;
end;

end.
